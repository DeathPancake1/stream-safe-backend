// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 Int       @id @default(autoincrement())
  email              String    @unique
  firstname          String
  lastname           String
  password           String
  created            DateTime  @default(now())
  deviceId           String?   @unique
  deviceIdLastUpdate DateTime?
  publicKey          String?

  // Relationships
  photo                    Photo?         @relation(fields: [photoId], references: [id])
  photoId                  Int?           @unique
  subscripedChannels       Channel[]      @relation("Subscriptions")
  ownedChannels            Channel[]      @relation("OwnedChannels")
  exchangedKeysForSender   ExchangedKey[] @relation("senderEmails")
  exchangedKeysForReceiver ExchangedKey[] @relation("receiverEmails")
  savedFilesForSender      SavedFile[]    @relation("senderSavedFiles")
  savedFilesForReceiver    SavedFile[]    @relation("receiverSavedFiles")
  changingPassword         Boolean @default(false)
  verified                 Boolean @default(false)
}

model Photo {
  id      Int      @id @default(autoincrement())
  path     String
  owner User?
  channel   Channel?
}

model Channel {
  id           String   @id @default(uuid()) @unique
  title        String
  description  String
  private      Boolean
  created      DateTime @default(now())
  lastActive   DateTime @updatedAt
  totalMembers Int
  channelContent String[]
  language String
  rating Float

  // Relationshitps
  // subscriptionPlan  Subscription @relation(fields: [subscriptionId], references: [id])
  // subscriptionId    Int
  owner        User           @relation("OwnedChannels", fields: [ownerId], references: [id])
  ownerId      Int
  thumbnail Photo? @relation(fields: [thumbnailId], references: [id])
  thumbnailId Int? @unique
  subscribers  User[]         @relation("Subscriptions")
  channelKeys  ExchangedKey[] @relation("ChannelKeys")
  channelVideos Video[]       @relation("ChannelVideos")
}

// model Subscription {
//   id        Int @id @default(autoincrement())
//   title     String
//   description String
//   price     Float

//   // Relationships
//   subscripedChannels  Channel[]
// }

model Video {
  id               Int           @id @default(autoincrement())
  name             String
  type             String
  iv               String
  path             String       @unique
  size             Int
  sentDate         DateTime     @default(now())
  channel          Channel      @relation("ChannelVideos", fields: [channelId], references: [id])
  channelId        String
}

model Tag {
  id        Int @id @default(autoincrement())
  title     String
}

model ExchangedKey {
  id            Int         @id @default(autoincrement())
  sender        User        @relation("senderEmails", fields: [senderEmail], references: [email])
  senderEmail   String
  receiver      User        @relation("receiverEmails", fields: [receiverEmail], references: [email])
  receiverEmail String
  delivered     Boolean
  encryptedKey  String
  files         SavedFile[]
  exchangedDate DateTime    @default(now())
  channel       Channel?    @relation("ChannelKeys", fields: [channelId], references: [id])
  channelId     String?
  type          KeyType     @default(USER)
}

model SavedFile {
  id               Int          @id @default(autoincrement())
  sender           User         @relation("senderSavedFiles", fields: [senderEmail], references: [email])
  senderEmail      String
  receiver         User         @relation("receiverSavedFiles", fields: [receiverEmail], references: [email])
  receiverEmail    String
  exchangedKey     ExchangedKey @relation(fields: [idOfEncryptedKey], references: [id])
  idOfEncryptedKey Int
  name             String
  type             String
  iv               String
  path             String       @unique
  size             Int
  sentDate         DateTime     @default(now())
  delivered        Boolean
}

model OTP{
  id  Int @id @default(autoincrement())
  email String @unique
  otp String
  CreatedAt DateTime @default(now())
  type OTPType @default(VERIFYEMAIL)
}

enum KeyType {
  USER
  CHANNEL
}

enum OTPType{
  VERIFYEMAIL
  FORGETPASSWORD
}